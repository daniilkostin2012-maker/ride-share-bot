import os
import logging
import sqlite3
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("TELEGRAM_TOKEN")
PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://ride-share-bot.onrender.com

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            role TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

def save_role(user_id: int, role: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)', (user_id, role))
    conn.commit()
    conn.close()

# === Telegram-–±–æ—Ç ===
app = Flask(__name__)
telegram_app = Application.builder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:\n"
        "‚Üí /driver ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å\n"
        "‚Üí /passenger ‚Äî –ø–∞—Å—Å–∞–∂–∏—Ä"
    )

async def driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_role(update.effective_user.id, "driver")
    await update.message.reply_text("–í—ã ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å. üöó")

async def passenger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_role(update.effective_user.id, "passenger")
    await update.message.reply_text("–í—ã ‚Äî –ø–∞—Å—Å–∞–∂–∏—Ä. üßë‚Äçüíº")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("driver", driver))
telegram_app.add_handler(CommandHandler("passenger", passenger))

# === Webhook –∏ –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.before_first_request
def setup_webhook():
    webhook_full_url = f"{WEBHOOK_URL}/{TOKEN}"
    telegram_app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_full_url,
        url_path=TOKEN
    )
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_full_url}")

@app.route(f'/{TOKEN}', methods=['POST'])
def telegram_webhook():
    telegram_app.update_queue.put_nowait(
        telegram_app.update_processor.read_update(request.get_json())
    )
    return 'OK', 200

@app.route('/')
def health_check():
    return '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (Webhook –∞–∫—Ç–∏–≤–µ–Ω)', 200

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    init_db()
    app.run(host="0.0.0.0", port=PORT)