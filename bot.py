import os
import logging
import sqlite3
import re
from datetime import datetime
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_TOKEN")
PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ORS_API_KEY = os.getenv("ORS_API_KEY")  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–æ

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–ª–∞–¥–∞: [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞] ‚Äî –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò!
WAREHOUSE_COORDS = [73.17325327166235, 55.001957853274014]  # –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å

if not TOKEN or not WEBHOOK_URL:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –∏ WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ===
DATE, TIME, LOCATION, SEATS = range(4)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            role TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS driver_rides (
            ride_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            departure_lat REAL NOT NULL,
            departure_lon REAL NOT NULL,
            date TEXT NOT NULL,        -- YYYY-MM-DD
            time TEXT NOT NULL,        -- HH:MM
            seats INTEGER NOT NULL,    -- 1‚Äì4
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def save_role(user_id, role):
    conn = sqlite3.connect('users.db')
    conn.execute('INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)', (user_id, role))
    conn.commit()
    conn.close()

def save_driver_ride(user_id, lat, lon, date, time, seats):
    conn = sqlite3.connect('users.db')
    conn.execute('''
        INSERT INTO driver_rides (user_id, departure_lat, departure_lon, date, time, seats)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, lat, lon, date, time, seats))
    conn.commit()
    conn.close()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:\n"
        "‚Üí /driver ‚Äî –µ—Å–ª–∏ –≤—ã –≤–æ–¥–∏—Ç–µ–ª—å\n"
        "‚Üí /passenger ‚Äî –µ—Å–ª–∏ –≤—ã –ø–∞—Å—Å–∞–∂–∏—Ä"
    )

async def driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    save_role(user_id, "driver")
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: –≤–æ–¥–∏—Ç–µ–ª—å. üöó\n"
                                    "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_ride")

async def passenger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    save_role(user_id, "passenger")
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: –ø–∞—Å—Å–∞–∂–∏—Ä. üßë‚Äçüíº")

# === –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ ===
async def new_ride(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result or result[0] != "driver":
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ /driver.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18.10.2025):"
    )
    return DATE

async def receive_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if re.match(r'^\d{2}\.\d{2}\.\d{4}$', text):
        context.user_data['date'] = text
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):")
        return TIME
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
        return DATE

async def receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if re.match(r'^\d{1,2}:\d{2}$', text):
        h, m = text.split(':')
        time_norm = f"{int(h):02d}:{int(m):02d}"
        context.user_data['time'] = time_norm
        await update.message.reply_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–Ω–∞–∂–º–∏—Ç–µ —Å–∫—Ä–µ–ø–∫—É ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è):")
        return LOCATION
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ß–ß:–ú–ú")
        return TIME

async def receive_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    if location:
        context.user_data['lat'] = location.latitude
        context.user_data['lon'] = location.longitude
        await update.message.reply_text("üöó –°–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ? (1‚Äì4):")
        return SEATS
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram.")
        return LOCATION

async def receive_seats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        seats = int(update.message.text.strip())
        if 1 <= seats <= 4:
            context.user_data['seats'] = seats

            user_id = update.effective_user.id
            date_str = context.user_data['date']
            time_str = context.user_data['time']
            lat = context.user_data['lat']
            lon = context.user_data['lon']

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ YYYY-MM-DD
            date_db = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d")

            save_driver_ride(user_id, lat, lon, date_db, time_str, seats)

            await update.message.reply_text(
                f"‚úÖ –ü–æ–µ–∑–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"–î–∞—Ç–∞: {date_str}\n"
                f"–í—Ä–µ–º—è: {time_str}\n"
                f"–ú–µ—Å—Ç: {seats}\n"
                f"–û—Ç–∫—É–¥–∞: {lat:.4f}, {lon:.4f}"
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
            return SEATS
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (1‚Äì4).")
        return SEATS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("driver", driver))
    app.add_handler(CommandHandler("passenger", passenger))

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("new_ride", new_ride)],
        states={
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_time)],
            LOCATION: [MessageHandler(filters.LOCATION, receive_location)],
            SEATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_seats)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ webhook
    full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    logging.info(f"üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook: {full_webhook_url}")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=full_webhook_url,
        url_path=TOKEN
    )

if __name__ == '__main__':
    main()